设计思路及价值 (Design Philosophy and Value)

设计思路 (Design Philosophy)

1.代码知识图谱是核心 (Knowledge Graph as the Core)

问题: 直接将整个代码库作为文本喂给LLM，会遇到上下文窗口限制、信息丢失和“幻觉”问题。LLM可能无法准确理解跨文件的复杂调用关系。

思路: 我们不把代码当纯文本，而是通过静态分析（AST）将其解析为结构化的实体（类、函数）和关系（调用、继承）。这些信息构成的“代码知识图谱”是代码的“事实基础”。

优势: LLM的推理和生成能力被聚焦在这些经过验证的、结构化的“事实”上，而不是在海量文本中猜测，从而大幅提升了生成内容的准确性。

2.“静态分析 + LLM”的混合模式 (Hybrid Approach)

思路: 本方案结合了两种技术的长处。

静态分析: 负责提供确定性的、100%准确的代码结构信息（Ground Truth）。它回答“What”——“代码里有什么？”。

大型语言模型 (LLM): 负责理解意图、进行推理和自然语言生成。它回答“Why”和“How”——“这段代码的业务意图是什么？”、“如何用自然语言解释这个流程？”。

优势: 这种协同作用确保了生成的数据既有事实依据，又具备良好的可读性和逻辑性。

3.可追溯性是信任的基石 (Traceability by Design)

思路: 在AI生成内容的时代，可验证性至关重要。trace字段不是一个附加功能，而是设计的核心原则。

优势: 每一条生成的问答、每一个设计建议，都可以通过trace信息一键追溯到其在代码库中的源头。这不仅建立了对生成数据的信任，也为后续的数据审查和维护提供了极大便利。